// Generated by ReScript, PLEASE EDIT WITH CARE


function make() {
  return [];
}

function set($$this, f) {
  for(var i = 0; i <= 23; ++i){
    $$this[i] = f[i];
  }
}

function copy($$this, f) {
  set($$this, f);
}

function fromMatrix4($$this, projectionViewMatrix) {
  if (projectionViewMatrix.length !== 16) {
    throw {
          RE_EXN_ID: "Match_failure",
          _1: [
            "Frustum.res",
            17,
            6
          ],
          Error: new Error()
        };
  }
  var m00 = projectionViewMatrix[0];
  var m01 = projectionViewMatrix[1];
  var m02 = projectionViewMatrix[2];
  var m03 = projectionViewMatrix[3];
  var m10 = projectionViewMatrix[4];
  var m11 = projectionViewMatrix[5];
  var m12 = projectionViewMatrix[6];
  var m13 = projectionViewMatrix[7];
  var m20 = projectionViewMatrix[8];
  var m21 = projectionViewMatrix[9];
  var m22 = projectionViewMatrix[10];
  var m23 = projectionViewMatrix[11];
  var m30 = projectionViewMatrix[12];
  var m31 = projectionViewMatrix[13];
  var m32 = projectionViewMatrix[14];
  var m33 = projectionViewMatrix[15];
  set($$this, [
        m03 - m00,
        m13 - m10,
        m23 - m20,
        m33 - m30,
        m03 + m00,
        m13 + m10,
        m23 + m20,
        m33 + m30,
        m03 + m01,
        m13 + m11,
        m23 + m21,
        m33 + m31,
        m03 - m01,
        m13 - m11,
        m23 - m21,
        m33 - m31,
        m03 - m02,
        m13 - m12,
        m23 - m22,
        m33 - m32,
        m03 + m02,
        m13 + m12,
        m23 + m22,
        m33 + m32
      ]);
  return $$this;
}

function contains(param, param$1) {
  return true;
}

export {
  make ,
  set ,
  copy ,
  fromMatrix4 ,
  contains ,
}
/* No side effect */
