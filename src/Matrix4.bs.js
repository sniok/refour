// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "./Utils.bs.js";

function make() {
  return [
          1.0,
          0.0,
          0.0,
          0.0,
          0.0,
          1.0,
          0.0,
          0.0,
          0.0,
          0.0,
          1.0,
          0.0,
          0.0,
          0.0,
          0.0,
          1.0
        ];
}

function set($$this, arr) {
  for(var i = 0; i <= 15; ++i){
    $$this[i] = arr[i];
  }
  return $$this;
}

function copy($$this, m) {
  return set($$this, m);
}

function identity($$this) {
  return set($$this, [
              1.0,
              0.0,
              0.0,
              0.0,
              0.0,
              1.0,
              0.0,
              0.0,
              0.0,
              0.0,
              1.0,
              0.0,
              0.0,
              0.0,
              0.0,
              1.0
            ]);
}

function multiply($$this, t) {
  if ($$this.length !== 16) {
    throw {
          RE_EXN_ID: "Match_failure",
          _1: [
            "Matrix4.res",
            20,
            6
          ],
          Error: new Error()
        };
  }
  var m00 = $$this[0];
  var m01 = $$this[1];
  var m02 = $$this[2];
  var m03 = $$this[3];
  var m10 = $$this[4];
  var m11 = $$this[5];
  var m12 = $$this[6];
  var m13 = $$this[7];
  var m20 = $$this[8];
  var m21 = $$this[9];
  var m22 = $$this[10];
  var m23 = $$this[11];
  var m30 = $$this[12];
  var m31 = $$this[13];
  var m32 = $$this[14];
  var m33 = $$this[15];
  if (t.length !== 16) {
    throw {
          RE_EXN_ID: "Match_failure",
          _1: [
            "Matrix4.res",
            21,
            6
          ],
          Error: new Error()
        };
  }
  var t00 = t[0];
  var t01 = t[1];
  var t02 = t[2];
  var t03 = t[3];
  var t10 = t[4];
  var t11 = t[5];
  var t12 = t[6];
  var t13 = t[7];
  var t20 = t[8];
  var t21 = t[9];
  var t22 = t[10];
  var t23 = t[11];
  var t30 = t[12];
  var t31 = t[13];
  var t32 = t[14];
  var t33 = t[15];
  return set($$this, [
              m00 * t00 + m10 * t01 + m20 * t02 + m30 * t03,
              m01 * t00 + m11 * t01 + m21 * t02 + m31 * t03,
              m02 * t00 + m12 * t01 + m22 * t02 + m32 * t03,
              m03 * t00 + m13 * t01 + m23 * t02 + m33 * t03,
              m00 * t10 + m10 * t11 + m20 * t12 + m30 * t13,
              m01 * t10 + m11 * t11 + m21 * t12 + m31 * t13,
              m02 * t10 + m12 * t11 + m22 * t12 + m32 * t13,
              m03 * t10 + m13 * t11 + m23 * t12 + m33 * t13,
              m00 * t20 + m10 * t21 + m20 * t22 + m30 * t23,
              m01 * t20 + m11 * t21 + m21 * t22 + m31 * t23,
              m02 * t20 + m12 * t21 + m22 * t22 + m32 * t23,
              m03 * t20 + m13 * t21 + m23 * t22 + m33 * t23,
              m00 * t30 + m10 * t31 + m20 * t32 + m30 * t33,
              m01 * t30 + m11 * t31 + m21 * t32 + m31 * t33,
              m02 * t30 + m12 * t31 + m22 * t32 + m32 * t33,
              m03 * t30 + m13 * t31 + m23 * t32 + m33 * t33
            ]);
}

function multiplyScalar($$this, scalar) {
  for(var i = 0; i <= 15; ++i){
    $$this[i] = $$this[i] * scalar;
  }
  return $$this;
}

function determinant($$this) {
  if ($$this.length !== 16) {
    throw {
          RE_EXN_ID: "Match_failure",
          _1: [
            "Matrix4.res",
            51,
            6
          ],
          Error: new Error()
        };
  }
  var m00 = $$this[0];
  var m01 = $$this[1];
  var m02 = $$this[2];
  var m03 = $$this[3];
  var m10 = $$this[4];
  var m11 = $$this[5];
  var m12 = $$this[6];
  var m13 = $$this[7];
  var m20 = $$this[8];
  var m21 = $$this[9];
  var m22 = $$this[10];
  var m23 = $$this[11];
  var m30 = $$this[12];
  var m31 = $$this[13];
  var m32 = $$this[14];
  var m33 = $$this[15];
  var b0 = m00 * m11 - m01 * m10;
  var b1 = m00 * m12 - m02 * m10;
  var b2 = m01 * m12 - m02 * m11;
  var b3 = m20 * m31 - m21 * m30;
  var b4 = m20 * m32 - m22 * m30;
  var b5 = m21 * m32 - m22 * m31;
  var b6 = m00 * b5 - m01 * b4 + m02 * b3;
  var b7 = m10 * b5 - m11 * b4 + m12 * b3;
  var b8 = m20 * b2 - m21 * b1 + m22 * b0;
  var b9 = m30 * b2 - m31 * b1 + m32 * b0;
  return m13 * b6 - m03 * b7 + m33 * b8 - m23 * b9;
}

function transpose($$this) {
  if ($$this.length !== 16) {
    throw {
          RE_EXN_ID: "Match_failure",
          _1: [
            "Matrix4.res",
            68,
            6
          ],
          Error: new Error()
        };
  }
  var m00 = $$this[0];
  var m01 = $$this[1];
  var m02 = $$this[2];
  var m03 = $$this[3];
  var m10 = $$this[4];
  var m11 = $$this[5];
  var m12 = $$this[6];
  var m13 = $$this[7];
  var m20 = $$this[8];
  var m21 = $$this[9];
  var m22 = $$this[10];
  var m23 = $$this[11];
  var m30 = $$this[12];
  var m31 = $$this[13];
  var m32 = $$this[14];
  var m33 = $$this[15];
  return set($$this, [
              m00,
              m10,
              m20,
              m30,
              m01,
              m11,
              m21,
              m31,
              m02,
              m12,
              m22,
              m32,
              m03,
              m13,
              m23,
              m33
            ]);
}

function invert($$this) {
  if ($$this.length !== 16) {
    throw {
          RE_EXN_ID: "Match_failure",
          _1: [
            "Matrix4.res",
            73,
            6
          ],
          Error: new Error()
        };
  }
  var m00 = $$this[0];
  var m01 = $$this[1];
  var m02 = $$this[2];
  var m03 = $$this[3];
  var m10 = $$this[4];
  var m11 = $$this[5];
  var m12 = $$this[6];
  var m13 = $$this[7];
  var m20 = $$this[8];
  var m21 = $$this[9];
  var m22 = $$this[10];
  var m23 = $$this[11];
  var m30 = $$this[12];
  var m31 = $$this[13];
  var m32 = $$this[14];
  var m33 = $$this[15];
  var b00 = m00 * m11 - m01 * m10;
  var b01 = m00 * m12 - m02 * m10;
  var b02 = m00 * m13 - m03 * m10;
  var b03 = m01 * m12 - m02 * m11;
  var b04 = m01 * m13 - m03 * m11;
  var b05 = m02 * m13 - m03 * m12;
  var b06 = m20 * m31 - m21 * m30;
  var b07 = m20 * m32 - m22 * m30;
  var b08 = m20 * m33 - m23 * m30;
  var b09 = m21 * m32 - m22 * m31;
  var b10 = m21 * m33 - m23 * m31;
  var b11 = m22 * m33 - m23 * m32;
  var det = determinant($$this);
  if (det !== 0.0) {
    return multiplyScalar(set($$this, [
                    m11 * b11 - m12 * b10 + m13 * b09,
                    m02 * b10 - m01 * b11 - m03 * b09,
                    m31 * b05 - m32 * b04 + m33 * b03,
                    m22 * b04 - m21 * b05 - m23 * b03,
                    m12 * b08 - m10 * b11 - m13 * b07,
                    m00 * b11 - m02 * b08 + m03 * b07,
                    m32 * b02 - m30 * b05 - m33 * b01,
                    m20 * b05 - m22 * b02 + m23 * b01,
                    m10 * b10 - m11 * b08 + m13 * b06,
                    m01 * b08 - m00 * b10 - m03 * b06,
                    m30 * b04 - m31 * b02 + m33 * b00,
                    m21 * b02 - m20 * b04 - m23 * b00,
                    m11 * b07 - m10 * b09 - m12 * b06,
                    m00 * b09 - m01 * b07 + m02 * b06,
                    m31 * b01 - m30 * b03 - m32 * b00,
                    m20 * b03 - m21 * b01 + m22 * b00
                  ]), 1.0 / det);
  } else {
    return $$this;
  }
}

function perspective($$this, fov, aspect, near, far) {
  var fovRad = fov * (Utils.pi / 180.0);
  var f = 1.0 / Math.tan(fovRad / 2.0);
  var depth = 1.0 / (near - far);
  return set($$this, [
              f / aspect,
              0.0,
              0.0,
              0.0,
              0.0,
              f,
              0.0,
              0.0,
              0.0,
              0.0,
              (far + near) * depth,
              -1.0,
              0.0,
              0.0,
              2.0 * far * near * depth,
              0.0
            ]);
}

function orthogonal($$this, left, right, bottom, top, near, far) {
  var horizontal = 1.0 / (left - right);
  var vertical = 1.0 / (bottom - top);
  var depth = 1.0 / (near - far);
  return set($$this, [
              -2.0 * horizontal,
              0.0,
              0.0,
              0.0,
              0.0,
              -2.0 * vertical,
              0.0,
              0.0,
              0.0,
              0.0,
              2.0 * depth,
              0.0,
              (left + right) * horizontal,
              (top + bottom) * vertical,
              (far + near) * depth,
              1.0
            ]);
}

function normal($$this, m) {
  if (m.length !== 16) {
    throw {
          RE_EXN_ID: "Match_failure",
          _1: [
            "Matrix4.res",
            176,
            6
          ],
          Error: new Error()
        };
  }
  var m00 = m[0];
  var m01 = m[1];
  var m02 = m[2];
  var m03 = m[3];
  var m10 = m[4];
  var m11 = m[5];
  var m12 = m[6];
  var m13 = m[7];
  var m20 = m[8];
  var m21 = m[9];
  var m22 = m[10];
  var m23 = m[11];
  var m30 = m[12];
  var m31 = m[13];
  var m32 = m[14];
  var m33 = m[15];
  var b00 = m00 * m11 - m01 * m10;
  var b01 = m00 * m12 - m02 * m10;
  var b02 = m00 * m13 - m03 * m10;
  var b03 = m01 * m12 - m02 * m11;
  var b04 = m01 * m13 - m03 * m11;
  var b05 = m02 * m13 - m03 * m12;
  var b06 = m20 * m31 - m21 * m30;
  var b07 = m20 * m32 - m22 * m30;
  var b08 = m20 * m33 - m23 * m30;
  var b09 = m21 * m32 - m22 * m31;
  var b10 = m21 * m33 - m23 * m31;
  var b11 = m22 * m33 - m23 * m32;
  var det = determinant(m);
  if (det !== 0.0) {
    return multiplyScalar(set($$this, [
                    m11 * b11 - m12 * b10 + m13 * b09,
                    m02 * b10 - m01 * b11 - m03 * b09,
                    m31 * b05 - m32 * b04 + m33 * b03,
                    0.0,
                    m12 * b08 - m10 * b11 - m13 * b07,
                    m00 * b11 - m02 * b08 + m03 * b07,
                    m32 * b02 - m30 * b05 - m33 * b01,
                    0.0,
                    m10 * b10 - m11 * b08 + m13 * b06,
                    m01 * b08 - m00 * b10 - m03 * b06,
                    m30 * b04 - m31 * b02 + m33 * b00,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0
                  ]), 1.0 / det);
  } else {
    return $$this;
  }
}

export {
  make ,
  set ,
  copy ,
  identity ,
  multiply ,
  multiplyScalar ,
  determinant ,
  transpose ,
  invert ,
  perspective ,
  orthogonal ,
  normal ,
}
/* Utils Not a pure module */
