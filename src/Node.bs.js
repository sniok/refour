// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Ops from "./Ops.bs.js";
import * as Camera from "./Camera.bs.js";
import * as Matrix4 from "./Matrix4.bs.js";
import * as Vector3 from "./Vector3.bs.js";
import * as Quaternion from "./Quaternion.bs.js";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";

function make(kind, childrenOpt) {
  var children = childrenOpt !== undefined ? childrenOpt : [];
  return {
          kind: kind,
          matrix: Matrix4.make(),
          quaternion: Quaternion.make(undefined, undefined, undefined, undefined),
          position: Vector3.make(0.0, 0.0, 0.0),
          scale: Vector3.make(1.0, 1.0, 1.0),
          up: Vector3.make(0.0, 1.0, 0.0),
          children: children,
          matrixAutoUpdate: true,
          visible: true,
          frustumCulled: true
        };
}

function updateMatrix($$this) {
  if ($$this.matrixAutoUpdate) {
    Ops.compose($$this.matrix, $$this.position, $$this.quaternion, $$this.scale);
    var parent = $$this.parent;
    if (parent !== undefined) {
      Matrix4.multiply($$this.matrix, parent.matrix);
    }
    $$this.children.forEach(function (child) {
          updateMatrix(child);
        });
  }
  var match = $$this.kind;
  if (typeof match === "object" && match.NAME === "Camera") {
    return Camera.updateMatrix(match.VAL, $$this.matrix);
  }
  
}

function unpack(kind) {
  return kind.VAL;
}

function add($$this, child) {
  $$this.children.push(child);
  child.parent = $$this;
}

function addMany($$this, children) {
  Caml_splice_call.spliceObjApply($$this.children, "push", [children]);
  children.forEach(function (child) {
        child.parent = $$this;
      });
}

function remove($$this, children) {
  children.forEach(function (child) {
        var childIndex = $$this.children.indexOf(child);
        if (childIndex !== -1) {
          $$this.children.splice(childIndex, 1);
        }
        child.parent = undefined;
      });
}

function traverse($$this, callback) {
  if (!callback($$this)) {
    $$this.children.forEach(function (child) {
          traverse(child, callback);
        });
    return ;
  }
  
}

function lookAt($$this, target) {
  return Quaternion.lookAt($$this.quaternion, $$this.position, target, $$this.up);
}

export {
  make ,
  updateMatrix ,
  unpack ,
  add ,
  addMany ,
  remove ,
  traverse ,
  lookAt ,
}
/* Ops Not a pure module */
