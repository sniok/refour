// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Vector3 from "./Vector3.bs.js";

function make(xOpt, yOpt, zOpt, wOpt) {
  var x = xOpt !== undefined ? xOpt : 0.0;
  var y = yOpt !== undefined ? yOpt : 0.0;
  var z = zOpt !== undefined ? zOpt : 0.0;
  var w = wOpt !== undefined ? wOpt : 1.0;
  return {
          x: x,
          y: y,
          z: z,
          w: w
        };
}

function set($$this, x, y, z, w) {
  $$this.x = x;
  $$this.y = y;
  $$this.z = z;
  $$this.w = w;
  return $$this;
}

function copy($$this, q) {
  return set($$this, q.x, q.y, q.z, q.w);
}

function identity($$this) {
  return set($$this, 0.0, 0.0, 0.0, 1.0);
}

function addScalar($$this, scalar) {
  $$this.x = $$this.x + scalar;
  $$this.y = $$this.y + scalar;
  $$this.z = $$this.z + scalar;
  $$this.w = $$this.w + scalar;
  return $$this;
}

function add(a, b) {
  return a + b;
}

function opFn(op) {
  return function (a, b) {
    switch (op) {
      case "Add" :
          return a + b;
      case "Sub" :
          return a - b;
      case "Div" :
          return a / b;
      case "Mutl" :
          return a * b;
      
    }
  };
}

function forEachComp(op) {
  return function ($$this, that) {
    var op$1 = function (a, b) {
      switch (op) {
        case "Add" :
            return a + b;
        case "Sub" :
            return a - b;
        case "Div" :
            return a / b;
        case "Mutl" :
            return a * b;
        
      }
    };
    if (typeof that === "number") {
      $$this.x = op$1($$this.x, that);
      $$this.y = op$1($$this.y, that);
      $$this.z = op$1($$this.z, that);
      $$this.w = op$1($$this.w, that);
      return $$this;
    }
    $$this.x = op$1($$this.x, that.x);
    $$this.y = op$1($$this.y, that.y);
    $$this.z = op$1($$this.z, that.z);
    $$this.w = op$1($$this.w, that.w);
    return $$this;
  };
}

function addValue($$this, v) {
  ((function ($$this, that) {
          var op = function (a, b) {
            return a + b;
          };
          if (typeof that === "number") {
            $$this.x = op($$this.x, that);
            $$this.y = op($$this.y, that);
            $$this.z = op($$this.z, that);
            $$this.w = op($$this.w, that);
            return $$this;
          }
          $$this.x = op($$this.x, that.x);
          $$this.y = op($$this.y, that.y);
          $$this.z = op($$this.z, that.z);
          $$this.w = op($$this.w, that.w);
          return $$this;
        })($$this, v));
  return $$this;
}

function fromEuler(t, x, y, z) {
  var sx = Math.sin(x);
  var cx = Math.cos(x);
  var sy = Math.sin(y);
  var cy = Math.cos(y);
  var sz = Math.sin(z);
  var cz = Math.cos(z);
  return set(t, sx * cy * cz + cx * sy * sz, cx * sy * cz - sx * cy * sz, cx * cy * sz + sx * sy * cz, cx * cy * cz - sx * sy * sz);
}

function lookAt($$this, eye, target, up) {
  var z = Vector3.subtract(Vector3.clone(eye), target);
  if (Vector3.getLength(z) === 0.0) {
    z.z = 1.0;
  } else {
    Vector3.normalize(z);
  }
  var x = Vector3.cross(Vector3.clone(up), z);
  if (Vector3.getLength(x) === 0.0) {
    var pup = Vector3.clone(up);
    if (pup.z > 0.0) {
      pup.x = pup.x + 0.00001;
    } else if (pup.y > 0.0) {
      pup.z = pup.z + 0.00001;
    } else {
      pup.y = pup.y + 0.00001;
    }
    Vector3.cross(x, pup);
  }
  Vector3.normalize(x);
  var y = Vector3.cross(Vector3.clone(z), x);
  var sm11 = x.x;
  var sm12 = x.y;
  var sm13 = x.z;
  var sm21 = y.x;
  var sm22 = y.y;
  var sm23 = y.z;
  var sm31 = z.x;
  var sm32 = z.y;
  var sm33 = z.z;
  var trace = sm11 + sm22 + sm33;
  if (trace > 0.0) {
    var s = Math.sqrt(trace + 1.0) * 2.0;
    return set($$this, (sm23 - sm32) / s, (sm31 - sm13) / s, (sm12 - sm21) / s, s / 4.0);
  }
  if (sm11 > sm22 && sm11 > sm33) {
    var s$1 = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2.0;
    return set($$this, s$1 / 4.0, (sm12 + sm21) / s$1, (sm31 + sm13) / s$1, (sm23 - sm32) / s$1);
  }
  if (sm22 > sm33) {
    var s$2 = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2.0;
    return set($$this, (sm12 + sm21) / s$2, s$2 / 4.0, (sm23 + sm32) / s$2, (sm31 - sm13) / s$2);
  }
  var s$3 = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2.0;
  return set($$this, (sm31 + sm13) / s$3, (sm23 + sm32) / s$3, s$3 / 4.0, (sm12 - sm21) / s$3);
}

var eps = 0.00001;

export {
  make ,
  set ,
  copy ,
  identity ,
  addScalar ,
  add ,
  opFn ,
  forEachComp ,
  addValue ,
  fromEuler ,
  eps ,
  lookAt ,
}
/* No side effect */
